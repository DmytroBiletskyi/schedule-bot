#import google.cloud.logging
#client = google.cloud.logging.Client()
#client.setup_logging()
import logging
import os
import threading
import time
from datetime import datetime, timedelta, date
import telebot
from telebot import types
from typing import List
import json
from classes.MainResolver import MainResolver, WeekDayResolver
from classes.UserData import UserData
from helpers.helpers import get_week_num, getDecodedSchedule, getNextSaturdayDate, getSaturdayData, getClassesStr

token = os.getenv('TOKEN_BOT')
# bot init
bot = telebot.TeleBot(token)
user_dict = {}
watching_users_list_by_group = {1: [], 2: []}
users_id_to_sent_message = []


def startMonitoring():
    try:
        while True:
            try:
                now = datetime.now()
                current_time = now.strftime("%H:%M")
                print(now)
                todays_date = date.today()
                week_num = get_week_num(todays_date.day, todays_date.month, todays_date.year)
                is_found = False
                for group_num in watching_users_list_by_group:
                    week_schedule = MainResolver(getDecodedSchedule(group_num))
                    week = week_schedule.getWeekByNumber(week_num)
                    saturday_lessons = getSaturdayLessonsIfToday(group_num, date.today())['objects']
                    day_classes = week.getDayClassesByDayName(WeekDayResolver.getDayNameByNumber(todays_date.weekday())) if not saturday_lessons else saturday_lessons
                    for clas in day_classes:
                        clas_time = str(clas.getTime()[0])
                        if str(clas_time) == str(current_time):
                            is_found = True
                            for user in watching_users_list_by_group[group_num]:
                                try:
                                    bot.send_message(user.id, "–ß–µ—Ä–µ–∑ 5 —Ö–≤ –ø–æ—á–Ω–µ—Ç—å—Å—è –ø–∞—Ä–∞:\n" + str(clas), disable_notification=bool(not clas.should_be_visited), parse_mode="html", disable_web_page_preview=True)
                                except Exception as e:
                                    logging.error("seems like user blocked bot!! ||user: "+str(user.id)+"error:" + str(e))
                if is_found:
                    time.sleep(50)  # TODO:set 1500
            except Exception as e:
                logging.error("Error in MONITORING while loop!! error:" + str(e))
            time.sleep(11)
    except Exception as e:
        logging.error("MONITORING IS BROKEN!! error:" + str(e))

t = threading.Thread(target=startMonitoring)
t.start()

def sendLogError(user_id, func_name, error, user_input=""):
    try:
        user = user_dict[user_id].user_name
        logging.error('user:' + str(user) + ' || func_name:' + str(func_name) + ' ||user_input:' + str(user_input)+ ' ||error:' + str(error))
    except Exception:
        logging.error('someone without id tried to break me :(')
        pass


def isUserInMonitoringList(user):
    result = False
    try:
        user_group = user.selected_group
        result = user in watching_users_list_by_group[user_group]
    except Exception as e:
        sendLogError(user.id, 'isUserInMonitoringList', e)
        print("error in isUserInMonitoringList" + str(e))
    return result

def addUserToMonitoringList(user_id):
    user = user_dict[user_id]
    if not isUserInMonitoringList(user):
        watching_users_list_by_group[user.selected_group].append(user)

def removeUserToMonitoringList(user_id):
    user = user_dict[user_id]
    if isUserInMonitoringList(user):
        watching_users_list_by_group[user.selected_group].remove(user)

def setUserActivity(user_id, activity_name):
    try:
        if user_id not in user_dict:
            return False
        else:
            user = user_dict[user_id]
            if activity_name in user.activity_list.keys():
                user.activity_list[activity_name] += 1
            else:
                user.activity_list[activity_name] = 1
    except Exception as e:
        print('error while setting activity:' + str(e))
        pass

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("1", "2")
    msg = bot.send_message(message.chat.id,
                           "–ü—Ä–∏–≤—ñ—Ç ‚úåÔ∏è, —è –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫. \n–ú–æ–∂—É: \n    –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —á–∞—Å –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ—ó –ø–∞—Ä–∏\n    –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—Ä–∏ –∑–∞ 5—Ö–≤(–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥)\n    –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ –Ω–∞–π–±–ª–∏–∂—á—É —Å—É–±–æ—Ç—É  \n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –ø—ñ–¥–≥—Ä—É–ø–∏ (1/2):",
                           reply_markup=markup)
    bot.register_next_step_handler(msg, process_group_step)


def process_group_step(message):
    try:
        setUserActivity(message.chat.id, 'process_group_step')
        if message.text == '1' or message.text == '2':
            is_old_user = message.chat.id in user_dict
            if is_old_user and isUserInMonitoringList(user_dict[message.chat.id]):
                removeUserToMonitoringList(message.chat.id)
                user_dict[message.chat.id].selected_group = int(message.text)
                addUserToMonitoringList(message.chat.id)
            else:
                try:
                    username = message.from_user.username
                    username = username if username is not None else message.from_user.first_name
                    username = username if username is not None else 'undefined username:' + message.chat.id
                except Exception as e:
                    username = 'undefined username' + message.chat.id
                user_data = UserData(int(message.chat.id), int(message.text), username)
                user_dict[message.chat.id] = user_data
                addUserToMonitoringList(message.chat.id)
            go_to_process_schedule_step_1(message,
                                          f'–í—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è {message.text} –ø—ñ–¥–≥—Ä—É–ø–ø–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:')
        else:
            msg = bot.reply_to(message, '–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø—ñ–¥–≥—Ä—É–ø–∏! –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:')
            bot.register_next_step_handler(msg, process_group_step)
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'process_group_step', e, message)
        msg = bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :( —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É')
        bot.register_next_step_handler(message, start_message)


def menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–°—å–æ–≥–æ–¥–Ω—ñ', '–ó–∞–≤—Ç—Ä–∞')
    markup.add('–û–±—Ä–∞—Ç–∏ –∑–∞ –¥–Ω–µ–º —Ç–∏–∂–Ω—è', '–§–æ—Ç–æ –†–æ–∑–∫–ª–∞–¥—É')
    markup.add("–ù–∞–∑–∞–¥üëà", "–ó–º—ñ–Ω–∞ –ø—ñ–¥–≥—Ä—É–ø–∏‚ôª")
    return markup


def process_schedule_step_1(message):
    try:
        setUserActivity(message.chat.id, 'process_schedule_step_1('+message.text+')')
        if message.text == '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥':
            msg = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:', reply_markup=menu())
            bot.register_next_step_handler(msg, process_schedule_step_2)
        elif message.text == '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥':
            addUserToMonitoringList(message.chat.id)
            go_to_process_schedule_step_1(message, '–ú–æ–Ω—ñ—Ç–æ—Ä—é —Ä–æ–∑–∫–ª–∞–¥. –¢–µ–ø–µ—Ä –±–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞ 5 —Ö–≤ –¥–æ –ø–æ—á–∞—Ç–∫—É –ø–∞—Ä–∏üòâ')
        elif message.text == '–ó—É–ø–∏–Ω–∏—Ç–∏ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥':
            removeUserToMonitoringList(message.chat.id)
            go_to_process_schedule_step_1(message, '–ó–∞–∫—ñ–Ω—á–∏–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏')
        elif message.text == '–ü–∞—Ä–∏ –≤ —Å—É–±–æ—Ç—É':
            result_message = getSaturdayLessonsIfToday(user_dict[message.chat.id].selected_group, getNextSaturdayDate())['reply']
            if not result_message:
                result_message = '—Å—Ö–æ–∂–µ –Ω–∞ —Ü—é—é —Å—É–±–æ—Ç—É –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏'
            go_to_process_schedule_step_1(message, result_message)
        elif message.text == '–ù–∞–∑–∞–¥üëà':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("1", "2")
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –ø—ñ–¥–≥—Ä—É–ø–∏ (1/2):', reply_markup=markup)
            bot.register_next_step_handler(msg, process_group_step)
        elif message.text == "–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞":
            main_resolver = MainResolver(getDecodedSchedule(user_dict[message.chat.id].selected_group))
            saturday_data = getSaturdayData(date.today())
            next_class = main_resolver.getNextClass(None if not saturday_data else saturday_data['week_num'], None if not saturday_data else saturday_data['day_name'])
            if next_class is None:
                msg = bot.send_message(message.chat.id, '–ë—ñ–ª—å—à–µ –ø–∞—Ä —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –±—É–¥–µ')
            else:
                msg = bot.send_message(message.chat.id, "–Ω–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞: (–¥–æ –ø–æ—á–∞—Ç–∫—É " + next_class['time_left'] + ")\n" + str(next_class['object']), parse_mode="html", disable_web_page_preview=True)
            bot.register_next_step_handler(msg, process_schedule_step_1)
        elif message.from_user.id == 608787896 and message.text == 'admin':
            go_to_admin_panel()
        else:
            msg = bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
            bot.register_next_step_handler(msg, process_schedule_step_1)
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'process_schedule_step_1', e, message)
        bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :(1')
        bot.register_next_step_handler(message, process_schedule_step_1)


def handle_admin(message):
    try:
        if message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            static_msg = 'user_count:' + str(len(user_dict))
            static_msg += '\nuser_mon_g_1:' + str(len(watching_users_list_by_group[1]))
            static_msg += '\nuser_mon_g_2:' + str(len(watching_users_list_by_group[2]))
            static_msg += '\nusers:'
            count = 1
            for user_id in user_dict:
                user = user_dict[user_id]
                if user is None:
                    continue
                static_msg += '\n   ' + str(count) + ') name:' + str(user.user_name) + '   gr:' + str(
                    user.selected_group) + '   in_mon_list:' + str(isUserInMonitoringList(user)) + ' id:'+ str(user.id)
                count += 1
                for activity in user.activity_list.keys():
                    static_msg += '\n      ' + str(user.activity_list[activity]) + ': ' + str(activity)
            go_to_admin_panel('–Ω—É –¥–µ—Ä–∂–∏\n' + static_msg)
            logging.info('—á–µ–ª –∑ –∞–π–¥—ñ –≥–ª—è–Ω—É–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ' + str(message.chat.id))
        elif message.text == "–ü–æ—Å–ª–∞—Ç—å –º–µ—Å–µ–¥–∂ —é–∑–µ—Ä–∞–º":
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:')
            bot.register_next_step_handler(msg, sent_message_to_users)
        elif message.text == "–ü–æ—Å–ª–∞—Ç—å –º–µ—Å–µ–¥–∂ —é–∑–µ—Ä–∞–º –ø–æ –∞–π–¥–∏":
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —é–∑–µ—Ä –∞–π–¥–∏—à–Ω—ñ–∫–∏:')
            bot.register_next_step_handler(msg, sent_message_to_users_set_id)
        elif message.text == "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤":
            users = ''
            for user_id in user_dict:
                users += str(user_id) + ','
            go_to_admin_panel('—Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤\n' + users)
        elif message.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥":
            msg = bot.send_message(message.chat.id, '–°–∫–∏–Ω—å —Ñ–∞–π–ª —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:')
            bot.register_next_step_handler(msg, update_schedule_handler)
        elif message.text == '–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å':
            try:
                for user_id in user_dict:
                    user = user_dict[user_id]
                    if user is None:
                        continue
                    user.activity_list = {}
            except Exception as e:
                sendLogError(608787896, '–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', e, '')
            go_to_admin_panel()
        else:
            go_to_process_schedule_step_1(message)
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'sent_message_to_users', e, message)
        msg = bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :( —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É')
        go_to_admin_panel()


@bot.message_handler(content_types=['document'])
def update_schedule_handler(message):
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open('static/schedule1.json', 'wb') as new_file:
            new_file.write(downloaded_file)
        print(getDecodedSchedule(1))

        bot.send_message(608787896, "–∞–ø–¥–µ–π—Ç–Ω—É–≤ —Ä–æ–∑–∫–ª–∞–¥")
        go_to_admin_panel()
    except Exception as e:
        bot.send_message(608787896, "–æ—à–∏–±–∫–∞ –∫–æ–ª–∏ –∞–ø–¥–µ–π—Ç–∏–≤ —Ä–æ–∑–∫–ª–∞–¥")
        sendLogError(608787896, 'update_schedule_handler', e, 'file')
        go_to_admin_panel()


def sent_message_to_users(message):
    try:
        if message != 'no':
            for user_id in user_dict:
                try:
                    bot.send_message(user_id, message.text, disable_notification=False)
                except Exception as e:
                    bot.reply_to(message, '–Ω–µ –∑–º—ñ–≥ –ø–æ—Å–ª–∞—Ç—å –º–µ—Å–µ–¥–∂ —é–∑–µ—Ä—É ' + str(user_id) + ' ' + str(user_dict[user_id].user_name))
                    sendLogError(message.chat.id, 'sent_message_to_users for loop', e, message)
        go_to_admin_panel()
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'sent_message_to_users', e, message)
        msg = bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :( —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É')
        go_to_admin_panel()
def sent_message_to_users_by_id(message):
    try:
        if message.text != 'no':
            for user_id in users_id_to_sent_message:
                try:
                    bot.send_message(user_id, message.text)
                except Exception as e:
                    user_name = "undefined_user" if user_id not in user_dict else str(user_dict[user_id].user_name)
                    bot.reply_to(message, '–Ω–µ –∑–º—ñ–≥ –ø–æ—Å–ª–∞—Ç—å –º–µ—Å–µ–¥–∂ —é–∑–µ—Ä—É ' + str(user_id) + ' ' + user_name)
                    sendLogError(message.chat.id, 'sent_message_to_users_by_id for loop', e, message)
        go_to_admin_panel()
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'sent_message_to_users_by_id', e, message)
        msg = bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :( —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É')
        go_to_admin_panel()
def sent_message_to_users_set_id(message):
    try:
        global users_id_to_sent_message
        users_id_to_sent_message = json.loads('['+message.text+']')
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:')
        bot.register_next_step_handler(msg, sent_message_to_users_by_id)
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'sent_message_to_users', e, message)
        msg = bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :( —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É')
        go_to_admin_panel()

def getSaturdayLessonsIfToday(selected_group, day):
    reply = ''
    day_classes = []
    try:
        saturday_data = getSaturdayData(day)
        if saturday_data:
            reply += "–≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤—É—î–º –∑–∞ " + str(saturday_data['postponed_from']) + (' II' if saturday_data['week_num'] %2 == 0 else ' I') + ' —Ç–∏–∂–¥–µ–Ω—å ' + ' ' + str(saturday_data['day_name']) + '\n'
            obj = MainResolver(getDecodedSchedule(selected_group))
            week = obj.getWeekByNumber(saturday_data['week_num'])
            day_classes = week.getDayClassesByDayName(saturday_data['day_name'])
            reply += getClassesStr(day_classes)
    except Exception as e:
        logging.error("func: getSaturdayLessonsIfToday")
    return {"reply": reply, "objects": day_classes}

def process_schedule_step_2(message):
    try:
        setUserActivity(message.chat.id, 'process_schedule_step_2(' + message.text + ')')
        if message.text == '–°—å–æ–≥–æ–¥–Ω—ñ':
            bot.send_message(message.chat.id, '–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')
            todays_date = date.today()
            week_num = get_week_num(todays_date.day, todays_date.month, todays_date.year)
            user_data = user_dict[message.chat.id]  # –≥—Ä—É–ø–∞
            obj = MainResolver(getDecodedSchedule(user_data.selected_group))
            week = obj.getWeekByNumber(week_num)
            day_classes = week.getDayClassesByDayName(WeekDayResolver.getDayNameByNumber(todays_date.weekday()))
            reply = ''
            for clas in day_classes:
                reply += str(clas) + '\n'
            saturday_lessons = getSaturdayLessonsIfToday(user_dict[message.chat.id].selected_group, date.today())['reply']
            msg = bot.send_message(message.chat.id, reply if not saturday_lessons else saturday_lessons, parse_mode="html", disable_web_page_preview=True)
            bot.register_next_step_handler(msg, process_schedule_step_2)

        elif message.text == '–ó–∞–≤—Ç—Ä–∞':
            bot.send_message(message.chat.id, '–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
            todays_date = date.today()
            tomorrow_date = todays_date + timedelta(days=1)
            week_num = get_week_num(tomorrow_date.day, tomorrow_date.month, tomorrow_date.year)
            user_data = user_dict[message.chat.id]  # –≥—Ä—É–ø–∞
            obj = MainResolver(getDecodedSchedule(user_data.selected_group))
            week = obj.getWeekByNumber(week_num)
            day_classes = week.getDayClassesByDayName(WeekDayResolver.getDayNameByNumber(tomorrow_date.weekday()))
            if not day_classes:
                saturday_lessons = getSaturdayLessonsIfToday(user_dict[message.chat.id].selected_group, timedelta(days=1) + date.today())['reply']
                msg = bot.send_message(message.chat.id, '–ü–∞—Ä –Ω–µ–º–∞—î.' if not saturday_lessons else saturday_lessons, parse_mode="html", disable_web_page_preview=True)
                bot.register_next_step_handler(msg, process_schedule_step_2)
            else:
                reply = ''
                for clas in day_classes:
                    reply += str(clas) + '\n'
                msg = bot.send_message(message.chat.id, reply, parse_mode="html", disable_web_page_preview=True)
                bot.register_next_step_handler(msg, process_schedule_step_2)

        elif message.text == '–û–±—Ä–∞—Ç–∏ –∑–∞ –¥–Ω–µ–º —Ç–∏–∂–Ω—è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            first_week_option = '1'
            second_week_option = '2'
            todays_date = date.today()
            if get_week_num(todays_date.day, todays_date.month, todays_date.year) == 1:
                first_week_option += '(–ü–æ—Ç–æ—á–Ω–∏–π)'
            else:
                second_week_option += '(–ü–æ—Ç–æ—á–Ω–∏–π)'
            markup.add(first_week_option, second_week_option)
            markup.add("–ù–∞–∑–∞–¥üëà")
            msg = bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å:', reply_markup=markup)
            bot.register_next_step_handler(msg, process_schedule_step_3)
        elif message.text == '–§–æ—Ç–æ –†–æ–∑–∫–ª–∞–¥—É':
            today_date = date.today()
            week_num = get_week_num(today_date.day, today_date.month, today_date.year)
            day_name = WeekDayResolver.getDayNameByNumber(datetime.today().weekday())
            message_to_sent = "–°—å–æ–≥–æ–¥–Ω—ñ " + day_name + ", " + str(week_num) + "-–π —Ç–∏–∂–¥–µ–Ω—å"
            msg = bot.send_message(message.chat.id, message_to_sent)
            bot.send_media_group(message.chat.id, [telebot.types.InputMediaPhoto(open('media/photo_1.jpg', 'rb')), telebot.types.InputMediaPhoto(open('media/photo_2.jpg', 'rb'))])
            bot.register_next_step_handler(msg, process_schedule_step_2)
        elif message.text == "–ù–∞–∑–∞–¥üëà":
            go_to_process_schedule_step_1(message)
        elif message.text == '–ó–º—ñ–Ω–∞ –ø—ñ–¥–≥—Ä—É–ø–∏‚ôª':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("1", "2")
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –ø—ñ–¥–≥—Ä—É–ø–∏ (1/2):',
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, process_group_step)
        else:
            if message.text != "–ù–∞–∑–∞–¥üëà" or message.text != '–ó–º—ñ–Ω–∞ –ø—ñ–¥–≥—Ä—É–ø–∏‚ôª':
                msg = bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
                bot.register_next_step_handler(msg, process_schedule_step_2)
            else:
                msg = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:',
                                       reply_markup=menu())
                bot.register_next_step_handler(msg, process_schedule_step_2)
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'process_schedule_step_2', e, message)
        msg = bot.reply_to(message, '–í–∏—Ö—ñ–¥–Ω–∏–π!!! –©–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?')
        bot.register_next_step_handler(msg, process_schedule_step_2)


def go_to_admin_panel(message_to_sent='–í–∏–±–µ—Ä–∏ –¥—ñ—é:'):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤", "–û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    markup.add("–ü–æ—Å–ª–∞—Ç—å –º–µ—Å–µ–¥–∂ —é–∑–µ—Ä–∞–º –ø–æ –∞–π–¥–∏", "–ü–æ—Å–ª–∞—Ç—å –º–µ—Å–µ–¥–∂ —é–∑–µ—Ä–∞–º", "–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥")
    markup.add("–ù–∞–∑–∞–¥")
    msg = bot.send_message(608787896, message_to_sent, reply_markup=markup)
    bot.register_next_step_handler(msg, handle_admin)

def go_to_process_schedule_step_1(message, text_to_sent: str = '–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:'):
    try:
        isAdmin = message.from_user.id == 608787896
        user = user_dict[message.chat.id]
        is_user_monitoring_active = user in watching_users_list_by_group[user.selected_group]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", "–ó—É–ø–∏–Ω–∏—Ç–∏ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥" if is_user_monitoring_active else "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
        markup.add("–ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞", "–ü–∞—Ä–∏ –≤ —Å—É–±–æ—Ç—É")
        markup.add("–ù–∞–∑–∞–¥üëà")
        if isAdmin:
            markup.add("admin")
        msg = bot.send_message(message.chat.id, text_to_sent,
                               reply_markup=markup, parse_mode="html", disable_web_page_preview=True)
        bot.register_next_step_handler(msg, process_schedule_step_1)
    except Exception as e:
        sendLogError(message.chat.id, 'go_to_process_schedule_step_1', e, message)
        print('err')

def process_schedule_step_3(message):
    try:
        setUserActivity(message.chat.id, 'process_schedule_step_3(' + message.text + ')')
        if message.text == "–ù–∞–∑–∞–¥üëà":
            msg = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:', reply_markup=menu())
            bot.register_next_step_handler(msg, process_schedule_step_2)
        elif message.text == "1(–ü–æ—Ç–æ—á–Ω–∏–π)" or message.text == "2(–ü–æ—Ç–æ—á–Ω–∏–π)" or message.text == "1" or message.text == "2":
            week = message.text
            user_data = user_dict[message.chat.id]
            user_data.selected_week = int(week[0])
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü—è—Ç–Ω–∏—Ü—è')
            markup.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—éüëà")
            msg = bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:', reply_markup=markup)
            bot.register_next_step_handler(msg, process_schedule_step_4)
        else:
            msg = bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å:')
            bot.register_next_step_handler(msg, process_schedule_step_3)
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'process_schedule_step_3', e, message)
        bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :(3')
        bot.register_next_step_handler(message, process_schedule_step_3)


def process_schedule_step_4(message):
    try:
        setUserActivity(message.chat.id, 'process_schedule_step_4(' + message.text + ')')
        if message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—éüëà":
            msg = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:', reply_markup=menu())
            bot.register_next_step_handler(msg, process_schedule_step_2)
        elif message.text == "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫" or message.text == "–í—ñ–≤—Ç–æ—Ä–æ–∫" or message.text == "–°–µ—Ä–µ–¥–∞" or message.text == "–ß–µ—Ç–≤–µ—Ä" or message.text == "–ü—è—Ç–Ω–∏—Ü—è":
            day = message.text
            user_data = user_dict[message.chat.id]
            user_data.selected_day = str(day)
            obj = MainResolver(getDecodedSchedule(user_data.selected_group))
            week = obj.getWeekByNumber(user_data.selected_week)
            day_classes = week.getDayClassesByDayName(user_data.selected_day)
            if not day_classes:
                msg = bot.send_message(message.chat.id, '–ü–∞—Ä –Ω–µ–º–∞—î. –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:')
                bot.register_next_step_handler(msg, process_schedule_step_4)
            else:
                reply = ''
                for clas in day_classes:
                    reply += str(clas) + '\n'
                bot.send_message(message.chat.id, reply, parse_mode="html", disable_web_page_preview=True)
                msg = bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:')
                bot.register_next_step_handler(msg, process_schedule_step_4)
        else:
            msg = bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:')
            bot.register_next_step_handler(msg, process_schedule_step_4)
    except Exception as e:
        print(e)
        sendLogError(message.chat.id, 'process_schedule_step_4', e, message)
        bot.reply_to(message, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :(4')
        bot.register_next_step_handler(message, process_schedule_step_4)


if __name__ == "__main__":
    bot.infinity_polling()
